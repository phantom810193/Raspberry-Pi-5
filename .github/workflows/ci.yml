name: CI - Camera & Face Tests

on:
  push:
    branches: [training-workflow, main]
  workflow_dispatch:

jobs:
  cam-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Show repo tree
        run: |
          pwd
          ls -lah
          echo "---- tests ----"
          ls -lah tests || true
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps (OpenCV)
        run: |
          python -m pip install --upgrade pip
          pip install opencv-python-headless numpy
      - name: Run camera FPS test (no real webcam needed)
        run: python tests/run_cam_test.py --seconds 5 --width 640 --height 480 --log cam.log
      - uses: actions/upload-artifact@v4
        with:
          name: cam-log
          path: cam.log

  face-test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Show repo tree
        run: |
          pwd
          echo "---- root ----"; ls -lah
          echo "---- tests ----"; ls -lah tests || true
          echo "---- personA ----"; ls -lah tests/assets/personA || true
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: System packages for dlib
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake libopenblas-dev liblapack-dev
      - name: Install Python deps (dlib / face_recognition)
        run: |
          python -m pip install --upgrade pip
          pip install "dlib==20.0.0" "face_recognition==1.3.0" pillow numpy requests
      - name: Run dlib face-ID test (your photos if present; else fallback)
        run: |
          if [ -d tests/assets/personA ] && ls tests/assets/personA/* >/dev/null 2>&1; then
            echo "Using your photos from tests/assets/personA"
            mkdir -p tests/_artifacts/debug
            python tests/run_face_test.py \
              --input-dir tests/assets/personA \
              --log id_test.log \
              --threshold 0.6 \
              --target_pass_ratio 0.8 \
              --save-dir tests/_artifacts/debug
          else
            echo "No personal photos found, running built-in sample variants"
            mkdir -p tests/_artifacts/variants
            python tests/run_face_test.py \
              --log id_test.log \
              --save-dir tests/_artifacts/variants
          fi
      - name: Upload id_test.log
        uses: actions/upload-artifact@v4
        with:
          name: id-test-log
          path: id_test.log
      - name: Upload id_test_files.txt (filenames & matches)
        uses: actions/upload-artifact@v4
        with:
          name: id-test-files
          path: id_test_files.txt
          if-no-files-found: ignore
      - name: Upload debug/variants (if any)
        uses: actions/upload-artifact@v4
        with:
          name: face-debug-or-variants
          path: |
            tests/_artifacts/debug/*.jpg
            tests/_artifacts/variants/*.jpg
          if-no-files-found: ignore

  api-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps for API
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install flask requests
          # 若 api.py 還用到人臉/影像套件，再視需要加：
          sudo apt-get update && sudo apt-get install -y cmake libopenblas-dev liblapack-dev
          pip install "dlib==20.0.0" "face_recognition==1.3.0" opencv-python-headless
      - name: Run Flask API latency test (<1s)
        run: |
          python tests/run_api_test.py --entry api.py --endpoint /detect_face --log api_test.log --timeout 1.0
      - name: Upload API logs
        uses: actions/upload-artifact@v4
        with:
          name: api-test-artifacts
          path: |
            api_test.log
            api_server_stdout.log
            api_server_stderr.log

  db-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # ✅ 先用 data.sql 初始化 users.db（若缺少 DB）
      - name: Init users.db from data.sql (if needed)
        run: |
          if [ ! -f users.db ]; then
            if [ -f data.sql ]; then
              echo "Creating users.db from data.sql"
              sqlite3 users.db < data.sql
            else
              echo "ERROR: missing both users.db and data.sql"; exit 1
            fi
          fi
          echo "Tables:"
          sqlite3 -header -csv users.db "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';" || true
          echo "Row counts per table:"
          for t in $(sqlite3 -batch users.db "SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';"); do
            c=$(sqlite3 -batch users.db "SELECT COUNT(*) FROM $t;") || c=0
            echo "$t,$c"
          done

      - name: Run SQLite content test (5 rows)
        run: python tests/run_db_test.py --db users.db --sql data.sql --log data_test.log --min_rows 5

      - name: Upload DB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: db-artifacts
          path: |
            data_test.log
            users.db
            data.sql
          if-no-files-found: ignore

  text-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Run display text test (>=5 lines, <5s)
        run: |
          python tests/run_text_test.py --entry display.py --log text_test.log --min_lines 5 --timeout 5
      - name: Upload text_test.log
        uses: actions/upload-artifact@v4
        with:
          name: text-test-log
          path: text_test.log
